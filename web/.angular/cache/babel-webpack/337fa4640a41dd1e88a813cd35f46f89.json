{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nimport { Constants } from \"../../../shared/helper/constants\";\nimport { filter, startWith, Subject, switchMap, take, tap, timer } from \"rxjs\";\nimport { CustomValidators } from \"../../../api/validator\";\nimport { map } from \"rxjs/operators\";\nlet RegisterComponent = class RegisterComponent {\n  constructor(fb, userService, authService) {\n    this.fb = fb;\n    this.userService = userService;\n    this.authService = authService;\n    this.formSubmit$ = new Subject();\n    this.isShowPassword = false;\n    this.isShowNewPasswordConfirm = false;\n    this.submited = false;\n  }\n\n  ngOnInit() {\n    this.initForm();\n    this.triggerSubmitForm(); // this.userService.validateUsername(\"hoanglinhhl05@gmail.com\").subscribe(value => {\n    //   console.log(value);\n    // });\n  }\n\n  initForm() {\n    this.formGroup = this.fb.group({\n      emailAddress: [\"\", Validators.compose([Validators.required, Validators.minLength(6), Validators.maxLength(45), Validators.email, Validators.pattern(Constants.REGEX_EMAIL)]), this.validateUserNameFromAPIDebounce.bind(this)],\n      phoneNumber: [\"\", Validators.compose([Validators.required, Validators.minLength(10), Validators.maxLength(15), Validators.pattern(Constants.NUMBER_ONLY)])],\n      fullName: [\"\", Validators.required, Validators.maxLength(45)],\n      password: [\"\", Validators.compose([Validators.required, Validators.minLength(6), Validators.maxLength(30), Validators.pattern(Constants.REGEX_PASSWORD)])],\n      newPasswordConfirm: [\"\", Validators.compose([Validators.required, Validators.minLength(6), Validators.maxLength(30), Validators.pattern(Constants.REGEX_PASSWORD)])]\n    }, {\n      validators: CustomValidators.validateControlsValue(\"password\", \"newPasswordConfirm\")\n    });\n  }\n\n  triggerSubmitForm() {\n    this.formSubmit$.pipe(tap(() => {\n      this.formGroup.markAsDirty();\n      this.submited = true;\n    }), switchMap(() => this.formGroup.statusChanges.pipe(tap(status => {\n      console.log(status);\n    }), startWith(this.formGroup.status), filter(status => status !== \"PENDING\"), take(1))), filter(status => status === \"VALID\")).subscribe(validationSuccessful => this.submitForm());\n  }\n\n  submitForm() {\n    console.log('adada');\n  }\n\n  clickShowNewPasswordConfirm() {\n    this.isShowNewPasswordConfirm = !this.isShowNewPasswordConfirm;\n  }\n\n  clickShowPassword() {\n    this.isShowPassword = !this.isShowPassword;\n  }\n\n  validateUserNameFromAPIDebounce(control) {\n    return timer(700).pipe(switchMap(() => this.userService.validateUsername(control.value).pipe(map(isValid => {\n      return isValid ? null : {\n        usernameDuplicated: true\n      };\n    }))));\n  }\n\n  validateControl(control) {\n    return Boolean((control === null || control === void 0 ? void 0 : control.errors) && ((control === null || control === void 0 ? void 0 : control.touched) || this.submited));\n  }\n\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})], RegisterComponent);\nexport { RegisterComponent };","map":null,"metadata":{},"sourceType":"module"}