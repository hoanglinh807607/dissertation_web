{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { LocalStorageService } from './local-storage.service';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Constants } from \"../../shared/helper/constants\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BaseService = /*#__PURE__*/(() => {\n  class BaseService {\n    constructor(http) {\n      this.http = http;\n      this.tokenKey = '';\n\n      if (BaseService.injector) {\n        this._http = http;\n        this._router = BaseService.injector.get(Router);\n        this.localStorage = BaseService.injector.get(LocalStorageService);\n      }\n    } // params add to url\n    // queryParams được truyền dưới dạng ?\n\n\n    doGet(apiUrl, params, queryParams) {\n      let header;\n      header = this.createHeader('');\n      const url = params === undefined || params === '' ? `${apiUrl}` : `${apiUrl}/${params}`;\n      return this.http.get(Constants.gatewayUrl + url, {\n        params: queryParams,\n        headers: header\n      }).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        this.handleError(error);\n        return throwError(error);\n      }));\n    }\n\n    doDelete(apiUrl, params) {\n      let header;\n      header = this.createHeader('');\n      const url = params === undefined ? `${apiUrl}` : `${apiUrl}/${params}`;\n      return this.http.delete(Constants.gatewayUrl + url, {\n        headers: header\n      }).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        this.handleError(error);\n        return throwError(error);\n      }));\n    }\n\n    doPost(apiUrl, data, type, hideGlobalAlert) {\n      const bodyString = JSON.stringify(data);\n      let header;\n      header = this.createHeader(type);\n\n      if (type === 'json') {\n        data = bodyString;\n      }\n\n      return this.http.post(Constants.gatewayUrl + `${apiUrl}`, data, {\n        headers: header\n      }).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        this.handleError(err, hideGlobalAlert);\n        return throwError(err);\n      }));\n    }\n\n    doPut(apiUrl, data, type, params, hideGlobalAlert) {\n      const bodyString = JSON.stringify(data);\n      let header;\n      header = this.createHeader(type);\n      const url = params === undefined ? `${apiUrl}` : `${apiUrl}/${params}`;\n\n      if (type === 'json') {\n        data = bodyString;\n      }\n\n      return this.http.put(Constants.gatewayUrl + `${url}`, data, {\n        headers: header\n      }).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        this.handleError(err, hideGlobalAlert);\n        return throwError(err);\n      }));\n    } // private doResponse(response: any, hideGlobalAlert?: boolean) {\n    //   if ( response !== undefined) {\n    //     if (response.status)\n    //   }\n    // }\n\n\n    createHeader(type) {\n      let contentType = '';\n      const token = localStorage.getItem('token');\n\n      if (token !== null || token !== undefined) {\n        this.tokenKey = token;\n      } else {\n        this.tokenKey = '';\n      }\n\n      const headerOption = {\n        'token': `${this.tokenKey}`\n      };\n\n      switch (type) {\n        case '':\n        case 'json':\n          contentType = 'application/json';\n          break;\n\n        case 'text':\n          contentType = 'text/plain';\n          break;\n\n        case 'authentication':\n          contentType = 'application/x-www-form-urlencoded';\n          break;\n\n        case 'empty':\n          contentType = '';\n          break;\n\n        case 'file':\n          contentType = 'multipart/form-data';\n          break;\n\n        case 'undefined':\n          contentType = 'undefined';\n          break;\n\n        default:\n          contentType = 'application/json';\n          break;\n      }\n\n      if (contentType.length > 0) {\n        headerOption['Content-Type'] = contentType;\n      }\n\n      const headers = new HttpHeaders(headerOption);\n      return headers;\n    }\n\n    handleError(errorResponse, hideGlobalAlert = false) {\n      if (errorResponse.status == 404) {\n        if (location.pathname != '/404' && location.pathname != '/app/404' && location.pathname != '/admin/404' && location.pathname != '/app/auth/login') {\n          this._router.navigate(['/404']);\n        }\n      }\n\n      if (errorResponse.status == 503) {\n        if (location.pathname != '/503') {\n          this.doLogout();\n\n          this._router.navigate(['/503']);\n        }\n      } // if (!hideGlobalAlert) {\n      //   if (errorResponse.status == 500) {\n      //     this.a\n      //   }\n      // }\n\n\n      if (errorResponse.status == 403 || errorResponse == 504) {\n        this.doLogout();\n      }\n    }\n\n    doLogout() {\n      this.localStorage.doLogout();\n    }\n\n    isNull(value) {\n      return value == null || value == undefined;\n    }\n\n  }\n\n  BaseService.ɵfac = function BaseService_Factory(t) {\n    return new (t || BaseService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BaseService,\n    factory: BaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return BaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}