{"ast":null,"code":"import { UrlAPI } from '../../shared/helper/constants';\nimport { HttpParams } from '@angular/common/http';\nimport { BaseService } from './base.service';\nimport { switchMap, timer } from 'rxjs';\nimport { CustomHttpParamEncoder } from \"../../api/CustomHttpParamEncoder\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService extends BaseService {\n    constructor(http) {\n      super(http);\n    }\n\n    getUserById(id) {\n      const apiUrl = UrlAPI.getUsers;\n      return this.doGet(apiUrl, id);\n    }\n\n    getUsers(userParams) {\n      const queryParameters = new HttpParams({\n        encoder: this.encoder\n      }).set('keyword', userParams.keyword).set('pageNo', userParams.pageNo).set('pageSize', userParams.pageSize).set('isClock', userParams.isClock).set('direction', userParams.direction).set('sortBy', userParams.sortBy);\n      const apiUrl = UrlAPI.getUsers;\n      return this.doGet(apiUrl, '', queryParameters);\n    }\n\n    createUser(postUserRequest) {\n      const apiUrl = UrlAPI.getUsers;\n      return this.doPost(apiUrl, postUserRequest, 'json');\n    }\n\n    updateUser(id, postUserRequest) {\n      const apiUrl = UrlAPI.getUsers;\n      return this.doPut(apiUrl, postUserRequest, 'json', id);\n    }\n\n    deleteUser(id) {\n      const apiUrl = UrlAPI.getUsers;\n      return this.doDelete(apiUrl, id);\n    }\n\n    resendMailResetPassword(id) {\n      const apiUrl = UrlAPI.resendMailResetPassword;\n      return this.doPut(apiUrl, '', '', id);\n    }\n\n    updatePassword(email, currentPassword, newPassword) {\n      const apiUrl = UrlAPI.updatePassword;\n      const param = new HttpParams({\n        encoder: new CustomHttpParamEncoder()\n      }).set('email', email).set('currentPassword', currentPassword).set('newPassword', newPassword);\n      return this.doPost(apiUrl, param);\n    }\n\n    validateUsername(username) {\n      const apiUrl = UrlAPI.validateUsername;\n      const param = new HttpParams({\n        encoder: new CustomHttpParamEncoder()\n      }).set('emailAddress', username);\n      return this.doPost(apiUrl, param, 'authentication');\n    }\n\n    validateUserNameFromAPIDebounce(control) {\n      return timer(300).pipe(switchMap(() => this.validateUsername(control.value).pipe(map(isValid => {\n        if (isValid) {\n          return null;\n        }\n\n        return {\n          usernameDuplicated: true\n        };\n      }))));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}